{"version":3,"file":"chat.min.js","sources":["../src/chat.js"],"sourcesContent":["import {renderForPromise, runTemplateJS} from 'core/templates';\n\nexport const init = () => {\n    // eslint-disable-next-line no-console\n    console.log(\"⚡ INIT WORK\");\n    const submitButton = document.querySelector('[data-action=\"submit\"]');\n    const textarea = document.querySelector('[data-region=\"input\"]');\n    // require(['core/templates'], function(templates) {\n    //     // eslint-disable-next-line no-console\n    //     console.log('Available methods:', Object.keys(templates));\n    // });\n\n    // eslint-disable-next-line no-console\n    console.log({submitButton, textarea});\n    submitButton.addEventListener('click', () => {\n        // eslint-disable-next-line no-console\n        console.log('Click');\n        if (textarea) {\n            const text = textarea.value.trim();\n            if (text !== '') {\n                // eslint-disable-next-line no-console\n                console.log(text);\n                addMessage(text, 'user');\n                textarea.value = '';\n                const answer = 'Hello world!';// Function, which return text\n                addMessage(answer, 'assistant');\n            } else {\n                // Message for user: The message shouldn't be empty\n            }\n        } else {\n            // eslint-disable-next-line no-console\n            console.error('Textarea not found!');\n        }\n    });\n};\n/**\n * Add message\n * @param {message} text\n * @param {*user or assistant} role\n */\nasync function addMessage(text, role) {\n    // Очистка текста\n    // const safeText = await sanitize(text);\n    // Рендеринг шаблона\n    const {html, js} = await renderForPromise('block_aiassistant/messages', {\n            role: role,\n            text: text,\n            time: new Date().toLocaleTimeString([], {hour: '2-digit', minute: '2-digit', hourCycle: 'h24'})\n        });\n    const chat = document.querySelector('[data-role=\"chat\"]');\n    chat.insertAdjacentHTML('beforeend', html);\n    chat.scrollTop = chat.scrollHeight;\n    if (js) {\n        runTemplateJS(js);\n    }\n}"],"names":["async","addMessage","text","role","html","js","renderForPromise","time","Date","toLocaleTimeString","hour","minute","hourCycle","chat","document","querySelector","insertAdjacentHTML","scrollTop","scrollHeight","runTemplateJS","_exports","init","console","log","submitButton","textarea","addEventListener","value","trim","error"],"mappings":"yKAwCAA,eAAeC,WAAWC,KAAMC,MAI5B,MAAMC,KAACA,KAAIC,GAAEA,UAAY,EAAAC,WAAgBA,kBAAC,6BAA8B,CAChEH,KAAMA,KACND,KAAMA,KACNK,MAAM,IAAIC,MAAOC,mBAAmB,GAAI,CAACC,KAAM,UAAWC,OAAQ,UAAWC,UAAW,UAE1FC,KAAOC,SAASC,cAAc,sBACpCF,KAAKG,mBAAmB,YAAaZ,MACrCS,KAAKI,UAAYJ,KAAKK,aAClBb,KACA,EAAAc,WAAAA,eAAcd,GAEtB,CArBEe,SAAAC,KAhCkBA,KAEhBC,QAAQC,IAAI,eACZ,MAAMC,aAAeV,SAASC,cAAc,0BACtCU,SAAWX,SAASC,cAAc,yBAOxCO,QAAQC,IAAI,CAACC,0BAAcC,oBAC3BD,aAAaE,iBAAiB,SAAS,KAGnC,GADAJ,QAAQC,IAAI,SACRE,SAAU,CACV,MAAMvB,KAAOuB,SAASE,MAAMC,OAC5B,GAAa,KAAT1B,KAAa,CAEboB,QAAQC,IAAIrB,MACZD,WAAWC,KAAM,QACjBuB,SAASE,MAAQ,GAEjB1B,WADe,eACI,YACvB,CAGJ,MAEIqB,QAAQO,MAAM,sBAClB,GACF,CAsBL"}